Changes to gameCard.ts
**Modify isSpecial to ensure Aces are recognized.
**Modify forcesPickup so that Ace blocks forced pickup rather than adding pickups.
//Updated isSpecial function

export const isSpecial = (card: Card) => {
    return (
        card.rank === CardRank.Two ||
        card.rank === CardRank.Ace ||  // Ace is special (can block forced pickups)
        card.rank === CardRank.Queen ||
        (card.rank === CardRank.Joker && card.suit === CardSuit.Joker) ||
        (card.rank === CardRank.Jack && colour(card.suit) === CardColour.Black)
    );
};
//Updated forcesPickup function

export const forcesPickup = (card: Card) => {
    if (card.rank === CardRank.Ace) return false;  // Ace prevents forced pickup
    return (
        card.rank === CardRank.Two ||
        (card.rank === CardRank.Joker && card.suit === CardSuit.Joker) ||
        (card.rank === CardRank.Jack && (card.suit === CardSuit.Clubs || card.suit === CardSuit.Spades))
    );
};

Changes to game.ts (applyTurn function)
You'll need to modify the applyTurn function to check if a player has an Ace when forced to pick up cards.

**Modify the pickup logic to check for an Ace
Before forcing a player to pick up cards, check if they have an Ace.

If they play one Ace, reset forcedPickupCount to 0 and continue the game.
If they play two Aces, let them choose a suit.
2. Modify the play logic to account for two Aces
If two Aces are played together, the player must select a new suit.

//Updated applyTurn function

applyTurn = (playerIndex: number, turn: TurnCommand) => {
    const pickupCard = () => {
        if (this.pile.length === 0) {
            this.played.forEach((turn, idx) => {
                if (idx === this.played.length - 1) return;
                turn.played.forEach(card => this.pile.push(card));
                this.pile = this.random.shuffle(this.pile);
            });
        }
        return this.pile.shift()!;
    };

    let turnEvent: TurnEvent;

    // --- HANDLE FORCED PICKUP ---
    if (turn.pickup) {
        const pickedUp: Card[] = [];

        // Check if player has an Ace in hand
        const hasAce = this.hands[playerIndex].some(card => card.rank === CardRank.Ace);
        const acesPlayed = turn.played.filter(card => card.rank === CardRank.Ace).length;

        if (this.forcedPickupCount > 0) {
            if (acesPlayed >= 1) {
                // One Ace blocks the pickup
                this.forcedPickupCount = 0;
                if (acesPlayed >= 2) {
                    // Two Aces allow suit change
                    this.suitChoice = turn.suit;
                }
            } else {
                // No Ace, pick up cards
                for (let i = 0; i < this.forcedPickupCount; i++) {
                    const card = pickupCard();
                    this.hands[playerIndex].push(card);
                    pickedUp.push(card);
                }
                this.forcedPickupCount = 0; // Reset after pickup
            }
        } else {
            // Normal single card draw
            const card = pickupCard();
            this.hands[playerIndex].push(card);
            pickedUp.push(card);
        }

        turnEvent = {
            played: [],
            suit: CardSuit.None,
            pickup: pickedUp,
            directionChanged: false,
        };
        this.played.push(turnEvent);
        return turnEvent;
    }

    // --- HANDLE PLAYED CARDS ---
    this.hands[playerIndex] = this.hands[playerIndex].filter(x => !turn.played.includes(x));

    let queenCount = 0;
    const topPlayed = turn.played[turn.played.length - 1];

    if (isSpecial(topPlayed)) {
        const shouldAddToPickup = forcesPickup(topPlayed);
        if (!shouldAddToPickup) this.forcedPickupCount = 0;

        let prevCard: Card | undefined = undefined;
        let shouldStack = true;
        for (let i = 0; i < turn.played.length; i++) {
            const card = turn.played[turn.played.length - (i + 1)];

            shouldStack = (!prevCard || (prevCard.rank === card.rank)) && isSpecial(card);
            const count = numberToPickup(card);
            if (shouldStack && count > 0 && shouldAddToPickup) {
                this.forcedPickupCount += count;
            }
            if (shouldStack && card.rank === CardRank.Queen) {
                queenCount++;
            }
            prevCard = card;
        }
    } else {
        this.forcedPickupCount = 0;
    }

    turnEvent = {
        played: turn.played,
        suit: turn.suit,
        pickup: [],
        directionChanged: (queenCount % 2) > 0,
    };
    this.played.push(turnEvent);

    // Handle suit change when two Aces are played
    if (turn.played.filter(card => card.rank === CardRank.Ace).length >= 2) {
        this.suitChoice = turn.suit;
    }

    return turnEvent;
};


Modify validateFirstCard
In the section where a player is required to pick up cards (context.numberToPickup > 0), you currently only allow playing the same rank to stack. You need to add a condition that allows playing an Ace to cancel the pickup.

Update:

const validateFirstCard = (card: Card, context: PlayContext) => {
    const lastCard = context.lastCard;
if (context.numberToPickup > 0), you currently only allow playing the same rank to stack. You need to add a condition that allows playing an Ace to cancel the pickup.

Update:

const validateFirstCard = (card: Card, context: PlayContext) => {
    const lastCard = context.lastCard;

    if (context.numberToPickup > 0) {
        // If an Ace is played, cancel the pickup
        if (card.rank === CardRank.Ace) {
            return []; // Ace cancels the pickup
        }

        // Otherwise, card MUST cancel or stack
        if (card.rank === lastCard.rank) {
            return [];
        } else {
            return [`You are being forced to pick up cards. You must play a ${rankName(lastCard.rank)} or an Ace.`];
        }
    } 
    // (Rest of your existing code remains unchanged)
Modify calculateTurn
You also need to modify calculateTurn to ensure that if an Ace is available, the AI prioritizes it when deciding the best move.

Update:
Modify the bestPlay function:

ts
Copy
Edit

const bestPlay = (playable: Card[][], game: GameContext) => {
    let bestMove: Card[] = [];

    playable.forEach(cards => {
        // Prioritize playing an Ace to cancel a pickup
        if (cards.some(card => card.rank === CardRank.Ace)) {
            bestMove = cards;
        }
        // Otherwise, pick the longest sequence
        if (cards.length > bestMove.length) {
            bestMove = cards;
        }
    });

    const topCard = bestMove[bestMove.length - 1];
    let suit = CardSuit.None;
    if (changesSuit(topCard)) {
        suit = bestSuit(game);
    }

    return {
        played: bestMove,
        suit: suit,
        pickup: false
    } as TurnCommand;
};
