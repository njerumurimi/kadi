To modify the game so that a **King** (instead of a **Queen**) changes direction, you'll need to update the relevant logic in **card.ts** and **game.ts**.

### **Changes in `card.ts`**
In the function `isSpecial`, the condition that checks for a **Queen** should be changed to a **King**.

#### **Before:**
```ts
export const isSpecial = (card: Card) => {
    return ((card.rank === CardRank.Two) || (card.rank === CardRank.Ace) || (card.rank === CardRank.Queen) || ((card.rank === CardRank.Joker) && (card.suit === CardSuit.Joker)) || ((card.rank === CardRank.Jack) && (colour(card.suit) === CardColour.Black)));
}
```

#### **After (Change Queen to King):**
```ts
export const isSpecial = (card: Card) => {
    return ((card.rank === CardRank.Two) || (card.rank === CardRank.Ace) || (card.rank === CardRank.King) || ((card.rank === CardRank.Joker) && (card.suit === CardSuit.Joker)) || ((card.rank === CardRank.Jack) && (colour(card.suit) === CardColour.Black)));
}
```

---

### **Changes in `game.ts`**
In `applyTurn`, where the direction change logic is handled, modify the check from `CardRank.Queen` to `CardRank.King`.

#### **Before:**
```ts
const directionChange = turn.played.some(card => card.rank === CardRank.Queen);
if (directionChange) {
    this.direction = this.direction === PlayDirection.Clockwise ? PlayDirection.AntiClockwise : PlayDirection.Clockwise;
}
```

#### **After (Change Queen to King):**
```ts
const directionChange = turn.played.some(card => card.rank === CardRank.King);
if (directionChange) {
    this.direction = this.direction === PlayDirection.Clockwise ? PlayDirection.AntiClockwise : PlayDirection.Clockwise;
}
```

---

### **Summary of Changes**
1. **Update `isSpecial`** in `card.ts` to check for `CardRank.King` instead of `CardRank.Queen`.
2. **Update direction change logic** in `game.ts` to trigger on `CardRank.King` instead of `CardRank.Queen`.

This ensures that playing a **King** will now reverse the direction of play.

To change the game so that **King** (instead of **Queen**) reverses the direction of play, you need to modify the logic where the **Queen** is currently handling direction changes. Hereâ€™s what needs to be updated:

### **Changes to Make**
1. **Modify the `applyTurn` function**  
   - Find the section where it checks if a **Queen** is played and changes direction.
   - Replace **Queen** with **King**.

2. **Ensure the `changeTurns` function works with Kings instead of Queens**  
   - When checking if direction should change, use **King**.

---

### **Modified Code in `applyTurn`**
Find this section:
```ts
// reset how many queens have been played
let queenCount = 0;
```
Change `queenCount` to `kingCount`:
```ts
// reset how many kings have been played
let kingCount = 0;
```

---

Find this part:
```ts
if (shouldStack && (card.rank === CardRank.Queen)) {
    queenCount++;
}
```
Change `Queen` to `King`:
```ts
if (shouldStack && (card.rank === CardRank.King)) {
    kingCount++;
}
```

---

Find this:
```ts
directionChanged: (queenCount % 2) > 0
```
Change `queenCount` to `kingCount`:
```ts
directionChanged: (kingCount % 2) > 0
```

---

This ensures that **Kings** now reverse direction instead of **Queens**. Let me know if you need any further adjustments!
